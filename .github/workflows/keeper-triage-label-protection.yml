---
# GitHub Repository Automations - Keeper: triage label protection
# MIT License - Copyright (c) 2025 Luiz Felipe F M Costa
# Source: https://github.com/thenets/repo-automations
#
# PERMISSIONS REQUIRED FOR FINE-GRAINED PERSONAL ACCESS TOKEN:
# When using a custom token (CUSTOM_GITHUB_TOKEN secret), the token must have:
# - Repository access: This repository (or "All repositories" for organization-wide use)
# - Repository permissions:
#   - Issues: Write (to add labels to issues)
#   - Pull requests: Write (to add labels to pull requests)
#   - Metadata: Read (to access repository information)
#
# SETUP INSTRUCTIONS:
# 1. Create a fine-grained personal access token at: https://github.com/settings/tokens?type=beta
# 2. Grant the permissions listed above
# 3. Add the token as a repository secret named 'CUSTOM_GITHUB_TOKEN'
# 4. This enables the workflow to run successfully for external contributors
#
# NOTE: Without a custom token, the workflow may fail for external contributors
# due to GitHub's default token permission restrictions.

name: "Keeper: triage label protection"

'on':
  workflow_run:
    workflows: ["Keeper: fork trigger"]
    types: [completed]

permissions:
  issues: write
  pull-requests: write

jobs:
  protect-triage-label:
    runs-on: ubuntu-latest

    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Download event metadata
        uses: actions/download-artifact@v4
        with:
          name: event-metadata
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Protect triage label on issue
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN || github.token }}
          script: |
            // Load event metadata from artifact
            const fs = require('fs');
            const eventData = JSON.parse(fs.readFileSync('event-metadata.json', 'utf8'));
            console.log(`Processing event: ${eventData.event_type} for #${eventData.issue_number}`);

            // Only process unlabeled events for triage label on issues
            if (eventData.event_type !== 'issues' || eventData.action !== 'unlabeled' || !eventData.label || eventData.label.name !== 'triage') {
              console.log('Not a triage label removal event for issues, skipping');
              return;
            }

            console.log(`Triage label removed from issue #${eventData.issue_number}, checking for protection conditions`);

            try {
              // Get all labels on the issue
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: eventData.issue_number
              });

              // Check if any release or backport labels exist
              const hasReleaseLabel = labels.some(label =>
                label.name.startsWith('release '));
              const hasBackportLabel = labels.some(label =>
                label.name.startsWith('backport '));

              // If no release or backport labels, re-add triage label
              if (!hasReleaseLabel && !hasBackportLabel) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: eventData.issue_number,
                  labels: ['triage']
                });
                console.log('✅ Re-added triage label to issue #' +
                  eventData.issue_number + ' (no release/backport labels found)');
              } else {
                console.log('ℹ️ Triage label removal allowed for issue #' +
                  eventData.issue_number + ' (release/backport labels present)');
              }
            } catch (error) {
              if (error.status === 403) {
                const errorMsg = `❌ Permission denied: Unable to re-add 'triage' label to issue #${eventData.issue_number}. This typically happens when the workflow is triggered by an external contributor and the repository doesn't have a CUSTOM_GITHUB_TOKEN secret configured with appropriate permissions. Repository administrators should add a CUSTOM_GITHUB_TOKEN secret with 'Issues: Write' permission.`;
                console.error(errorMsg);
                console.error('Error details:', error);
                throw new Error(errorMsg);
              } else if (error.status === 422) {
                // 422 could mean label already exists or label doesn't exist in repo
                // We need to check which case it is
                try {
                  const { data: existingLabels } = await github.rest.issues.listLabelsOnIssue({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: eventData.issue_number
                  });

                  const hasTriageLabel = existingLabels.some(label => label.name === 'triage');
                  if (hasTriageLabel) {
                    console.log('ℹ️ Triage label already exists on issue #' +
                      eventData.issue_number + ' - this is expected behavior');
                  } else {
                    // Label doesn't exist on issue, so 422 means label doesn't exist in repo
                    const errorMsg = `❌ Failed to re-add 'triage' label to issue #${eventData.issue_number}: Label 'triage' does not exist in the repository. Please create the 'triage' label in the repository settings.`;
                    console.error(errorMsg);
                    console.error('Error details:', error);
                    throw new Error(errorMsg);
                  }
                } catch (listError) {
                  const errorMsg = `❌ Error checking existing labels on issue #${eventData.issue_number}: ${listError.message}`;
                  console.error(errorMsg);
                  console.error('Error details:', listError);
                  throw new Error(errorMsg);
                }
              } else {
                const errorMsg = `❌ Unexpected error protecting triage label on issue #${eventData.issue_number}: ${error.message}`;
                console.error(errorMsg);
                console.error('Error details:', error);
                throw new Error(errorMsg);
              }
            }

      - name: Protect triage label on pull request
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN || github.token }}
          script: |
            // Load event metadata from artifact
            const fs = require('fs');
            const eventData = JSON.parse(fs.readFileSync('event-metadata.json', 'utf8'));
            console.log(`Processing event: ${eventData.event_type} for #${eventData.issue_number}`);

            // Only process unlabeled events for triage label on pull requests (non-draft)
            if (eventData.event_type !== 'pull_request' || eventData.action !== 'unlabeled' || !eventData.label || eventData.label.name !== 'triage' || eventData.draft) {
              console.log('Not a triage label removal event for non-draft PRs, skipping');
              return;
            }

            console.log(`Triage label removed from PR #${eventData.issue_number}, checking for protection conditions`);

            try {
              // Get all labels on the pull request
              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: eventData.issue_number
              });

              // Check if any release or backport labels exist
              const hasReleaseLabel = labels.some(label =>
                label.name.startsWith('release '));
              const hasBackportLabel = labels.some(label =>
                label.name.startsWith('backport '));

              // If no release or backport labels, re-add triage label
              if (!hasReleaseLabel && !hasBackportLabel) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: eventData.issue_number,
                  labels: ['triage']
                });
                console.log('✅ Re-added triage label to PR #' +
                  eventData.issue_number + ' (no release/backport labels found)');
              } else {
                console.log('ℹ️ Triage label removal allowed for PR #' +
                  eventData.issue_number + ' (release/backport labels present)');
              }
            } catch (error) {
              if (error.status === 403) {
                const errorMsg = `❌ Permission denied: Unable to re-add 'triage' label to PR #${eventData.issue_number}. This typically happens when the workflow is triggered by an external contributor and the repository doesn't have a CUSTOM_GITHUB_TOKEN secret configured with appropriate permissions. Repository administrators should add a CUSTOM_GITHUB_TOKEN secret with 'Pull requests: Write' permission.`;
                console.error(errorMsg);
                console.error('Error details:', error);
                throw new Error(errorMsg);
              } else if (error.status === 422) {
                // 422 could mean label already exists or label doesn't exist in repo
                // We need to check which case it is
                try {
                  const { data: existingLabels } = await github.rest.issues.listLabelsOnIssue({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: eventData.issue_number
                  });

                  const hasTriageLabel = existingLabels.some(label => label.name === 'triage');
                  if (hasTriageLabel) {
                    console.log('ℹ️ Triage label already exists on PR #' +
                      eventData.issue_number + ' - this is expected behavior');
                  } else {
                    // Label doesn't exist on PR, so 422 means label doesn't exist in repo
                    const errorMsg = `❌ Failed to re-add 'triage' label to PR #${eventData.issue_number}: Label 'triage' does not exist in the repository. Please create the 'triage' label in the repository settings.`;
                    console.error(errorMsg);
                    console.error('Error details:', error);
                    throw new Error(errorMsg);
                  }
                } catch (listError) {
                  const errorMsg = `❌ Error checking existing labels on PR #${eventData.issue_number}: ${listError.message}`;
                  console.error(errorMsg);
                  console.error('Error details:', listError);
                  throw new Error(errorMsg);
                }
              } else {
                const errorMsg = `❌ Unexpected error protecting triage label on PR #${eventData.issue_number}: ${error.message}`;
                console.error(errorMsg);
                console.error('Error details:', error);
                throw new Error(errorMsg);
              }
            }
