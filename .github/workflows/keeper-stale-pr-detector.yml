---
# GitHub Repository Automations - Keeper: stale PR detector
# MIT License - Copyright (c) 2025 Luiz Felipe F M Costa
# Source: https://github.com/thenets/repo-automations
#
# PERMISSIONS REQUIRED FOR FINE-GRAINED PERSONAL ACCESS TOKEN:
# When using a custom token (CUSTOM_GITHUB_TOKEN secret), the token must have:
# - Repository access: This repository (or "All repositories" for organization-wide use)
# - Repository permissions:
#   - Pull requests: Write (to add labels to pull requests)
#   - Pull requests: Read (to list and read pull request details)
#   - Issues: Read (to access issue comments and timeline)
#   - Metadata: Read (to access repository information)
#
# SETUP INSTRUCTIONS:
# 1. Create a fine-grained personal access token at: https://github.com/settings/tokens?type=beta
# 2. Grant the permissions listed above
# 3. Add the token as a repository secret named 'CUSTOM_GITHUB_TOKEN'
# 4. This enables the workflow to run successfully for external contributors
#
# NOTE: Without a custom token, the workflow may fail for external contributors
# due to GitHub's default token permission restrictions.

name: "Keeper: stale PR detector"

'on':
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering for testing

permissions:
  pull-requests: write

jobs:
  detect-stale-prs:
    runs-on: ubuntu-latest

    # CHANGE THIS: set your repo name here
    # this is used to prevent the workflow from running on other repos/forks
    if: github.repository == 'dednets/repo-automation-test'

    steps:
      - name: Detect and label stale PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN || github.token }}
          script: |
            const ONE_DAY_MS = 24 * 60 * 60 * 1000;
            const now = new Date();

            try {
              // Get all open pull requests
              const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });

              console.log(`Found ${pullRequests.length} open pull requests`);

              for (const pr of pullRequests) {
                try {
                  // Skip if PR is a draft
                  if (pr.draft) {
                    console.log(`PR #${pr.number} is a draft, skipping`);
                    continue;
                  }

                  // Skip if PR already has stale label
                  const hasStaleLabel = pr.labels.some(label => label.name === 'stale');
                  if (hasStaleLabel) {
                    console.log(`PR #${pr.number} already has stale label, skipping`);
                    continue;
                  }

                  // Get PR details including last activity
                  const lastActivity = await getLastActivityDate(pr.number);
                  const timeSinceLastActivity = now - lastActivity;

                  console.log(`PR #${pr.number}: Last activity ${Math.floor(timeSinceLastActivity / (1000 * 60 * 60))} hours ago`);

                  // If no activity for more than 1 day, add stale label
                  if (timeSinceLastActivity > ONE_DAY_MS) {
                    try {
                      await github.rest.issues.addLabels({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: pr.number,
                        labels: ['stale']
                      });
                      console.log(`✅ Added stale label to PR #${pr.number} (inactive for ${Math.floor(timeSinceLastActivity / (1000 * 60 * 60))} hours)`);
                    } catch (labelError) {
                      if (labelError.status === 403) {
                        const errorMsg = `❌ Permission denied: Unable to add 'stale' label to PR #${pr.number}. This typically happens when the workflow is triggered by an external contributor and the repository doesn't have a CUSTOM_GITHUB_TOKEN secret configured with appropriate permissions. Repository administrators should add a CUSTOM_GITHUB_TOKEN secret with 'Pull requests: Write' permission.`;
                        console.error(errorMsg);
                        console.error('Error details:', labelError);
                        throw new Error(errorMsg);
                      } else if (labelError.status === 422) {
                        // 422 could mean label already exists or label doesn't exist in repo
                        // We need to check which case it is
                        try {
                          const { data: existingLabels } = await github.rest.issues.listLabelsOnIssue({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            issue_number: pr.number
                          });

                          const hasStaleLabel = existingLabels.some(label => label.name === 'stale');
                          if (hasStaleLabel) {
                            console.log(`ℹ️ Stale label already exists on PR #${pr.number} - this is expected behavior`);
                          } else {
                            // Label doesn't exist on PR, so 422 means label doesn't exist in repo
                            const errorMsg = `❌ Failed to add 'stale' label to PR #${pr.number}: Label 'stale' does not exist in the repository. Please create the 'stale' label in the repository settings.`;
                            console.error(errorMsg);
                            console.error('Error details:', labelError);
                            throw new Error(errorMsg);
                          }
                        } catch (listError) {
                          const errorMsg = `❌ Error checking existing labels on PR #${pr.number}: ${listError.message}`;
                          console.error(errorMsg);
                          console.error('Error details:', listError);
                          throw new Error(errorMsg);
                        }
                      } else {
                        const errorMsg = `❌ Unexpected error adding stale label to PR #${pr.number}: ${labelError.message}`;
                        console.error(errorMsg);
                        console.error('Error details:', labelError);
                        throw new Error(errorMsg);
                      }
                    }
                  }
                } catch (error) {
                  console.error(`Error processing PR #${pr.number}:`, error);
                  // Continue processing other PRs even if one fails
                }
              }
            } catch (error) {
              console.error('Error fetching pull requests:', error);
              throw error;
            }

            async function getLastActivityDate(prNumber) {
              const activities = [];

              // Get PR details for updated_at timestamp
              const { data: prDetails } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              activities.push(new Date(prDetails.updated_at));

              // Get commits
              try {
                const { data: commits } = await github.rest.pulls.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  per_page: 100
                });
                commits.forEach(commit => {
                  activities.push(new Date(commit.commit.committer.date));
                });
              } catch (error) {
                console.log(`Could not fetch commits for PR #${prNumber}: ${error.message}`);
              }

              // Get comments
              try {
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  per_page: 100
                });
                comments.forEach(comment => {
                  activities.push(new Date(comment.created_at));
                });
              } catch (error) {
                console.log(`Could not fetch comments for PR #${prNumber}: ${error.message}`);
              }

              // Get review comments
              try {
                const { data: reviewComments } = await github.rest.pulls.listReviewComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  per_page: 100
                });
                reviewComments.forEach(comment => {
                  activities.push(new Date(comment.created_at));
                });
              } catch (error) {
                console.log(`Could not fetch review comments for PR #${prNumber}: ${error.message}`);
              }

              // Get reviews
              try {
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  per_page: 100
                });
                reviews.forEach(review => {
                  activities.push(new Date(review.submitted_at));
                });
              } catch (error) {
                console.log(`Could not fetch reviews for PR #${prNumber}: ${error.message}`);
              }

              // Get timeline events for label changes
              try {
                const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  per_page: 100
                });
                timeline.forEach(event => {
                  if (event.event === 'labeled' || event.event === 'unlabeled') {
                    activities.push(new Date(event.created_at));
                  }
                });
              } catch (error) {
                console.log(`Could not fetch timeline for PR #${prNumber}: ${error.message}`);
              }

              // Return the most recent activity date
              return activities.length > 0 ? new Date(Math.max(...activities)) : new Date(prDetails.created_at);
            }
