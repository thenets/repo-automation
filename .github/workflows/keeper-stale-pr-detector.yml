---
# GitHub Repository Automations - Keeper: stale PR detector
# MIT License - Copyright (c) 2025 Luiz Felipe F M Costa
# Source: https://github.com/thenets/repo-automations

name: "Keeper: stale PR detector"

'on':
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering for testing

permissions:
  pull-requests: write

jobs:
  detect-stale-prs:
    runs-on: ubuntu-latest

    # CHANGE THIS: set your repo name here
    # this is used to prevent the workflow from running on other repos/forks
    if: github.repository == 'thenets/repo-automations'

    steps:
      - name: Detect and label stale PRs
        uses: actions/github-script@v7
        with:
          script: |
            const ONE_DAY_MS = 24 * 60 * 60 * 1000;
            const now = new Date();

            try {
              // Get all open pull requests
              const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 100
              });

              console.log(`Found ${pullRequests.length} open pull requests`);

              for (const pr of pullRequests) {
                try {
                  // Skip if PR is a draft
                  if (pr.draft) {
                    console.log(`PR #${pr.number} is a draft, skipping`);
                    continue;
                  }

                  // Skip if PR already has stale label
                  const hasStaleLabel = pr.labels.some(label => label.name === 'stale');
                  if (hasStaleLabel) {
                    console.log(`PR #${pr.number} already has stale label, skipping`);
                    continue;
                  }

                  // Get PR details including last activity
                  const lastActivity = await getLastActivityDate(pr.number);
                  const timeSinceLastActivity = now - lastActivity;

                  console.log(`PR #${pr.number}: Last activity ${Math.floor(timeSinceLastActivity / (1000 * 60 * 60))} hours ago`);

                  // If no activity for more than 1 day, add stale label
                  if (timeSinceLastActivity > ONE_DAY_MS) {
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr.number,
                      labels: ['stale']
                    });
                    console.log(`Added stale label to PR #${pr.number} (inactive for ${Math.floor(timeSinceLastActivity / (1000 * 60 * 60))} hours)`);
                  }
                } catch (error) {
                  console.error(`Error processing PR #${pr.number}:`, error);
                }
              }
            } catch (error) {
              console.error('Error fetching pull requests:', error);
              throw error;
            }

            async function getLastActivityDate(prNumber) {
              const activities = [];

              // Get PR details for updated_at timestamp
              const { data: prDetails } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              activities.push(new Date(prDetails.updated_at));

              // Get commits
              try {
                const { data: commits } = await github.rest.pulls.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  per_page: 100
                });
                commits.forEach(commit => {
                  activities.push(new Date(commit.commit.committer.date));
                });
              } catch (error) {
                console.log(`Could not fetch commits for PR #${prNumber}: ${error.message}`);
              }

              // Get comments
              try {
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  per_page: 100
                });
                comments.forEach(comment => {
                  activities.push(new Date(comment.created_at));
                });
              } catch (error) {
                console.log(`Could not fetch comments for PR #${prNumber}: ${error.message}`);
              }

              // Get review comments
              try {
                const { data: reviewComments } = await github.rest.pulls.listReviewComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  per_page: 100
                });
                reviewComments.forEach(comment => {
                  activities.push(new Date(comment.created_at));
                });
              } catch (error) {
                console.log(`Could not fetch review comments for PR #${prNumber}: ${error.message}`);
              }

              // Get reviews
              try {
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  per_page: 100
                });
                reviews.forEach(review => {
                  activities.push(new Date(review.submitted_at));
                });
              } catch (error) {
                console.log(`Could not fetch reviews for PR #${prNumber}: ${error.message}`);
              }

              // Get timeline events for label changes
              try {
                const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  per_page: 100
                });
                timeline.forEach(event => {
                  if (event.event === 'labeled' || event.event === 'unlabeled') {
                    activities.push(new Date(event.created_at));
                  }
                });
              } catch (error) {
                console.log(`Could not fetch timeline for PR #${prNumber}: ${error.message}`);
              }

              // Return the most recent activity date
              return activities.length > 0 ? new Date(Math.max(...activities)) : new Date(prDetails.created_at);
            }
