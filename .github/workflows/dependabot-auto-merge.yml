---
name: "Dependabot: auto-merge"

'on':
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest

    # Only run on Dependabot PRs for GitHub Actions updates
    if: github.actor == 'dependabot[bot]' && contains(github.event.pull_request.labels.*.name, 'github-actions')

    steps:
      - name: Check if PR is for GitHub Actions
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = pr.labels.map(label => label.name);

            // Check if this is a GitHub Actions dependency update
            const isGitHubActions = labels.includes('github-actions');
            const isAutoMerge = labels.includes('auto-merge');
            const isDependencies = labels.includes('dependencies');

            console.log(`PR #${pr.number} labels: ${labels.join(', ')}`);
            console.log(`Is GitHub Actions: ${isGitHubActions}`);
            console.log(`Is Auto-merge: ${isAutoMerge}`);
            console.log(`Is Dependencies: ${isDependencies}`);

            return {
              shouldAutoMerge: isGitHubActions && isAutoMerge && isDependencies,
              prNumber: pr.number,
              prTitle: pr.title
            };

      - name: Wait for status checks
        if: fromJSON(steps.check-pr.outputs.result).shouldAutoMerge
        uses: actions/github-script@v7
        with:
          script: |
            const { shouldAutoMerge, prNumber } = ${{ steps.check-pr.outputs.result }};

            if (!shouldAutoMerge) {
              console.log('Skipping auto-merge - conditions not met');
              return;
            }

            // Wait for status checks to complete
            const maxAttempts = 30;
            const waitTime = 10000; // 10 seconds

            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              console.log(`Attempt ${attempt}/${maxAttempts}: Checking status...`);

              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              if (pr.mergeable_state === 'clean') {
                console.log('PR is ready to merge!');
                return;
              }

              if (pr.mergeable_state === 'unstable' || pr.mergeable_state === 'dirty') {
                throw new Error(`PR cannot be merged: ${pr.mergeable_state}`);
              }

              console.log(`PR state: ${pr.mergeable_state}, waiting...`);
              await new Promise(resolve => setTimeout(resolve, waitTime));
            }

            throw new Error('Timeout waiting for status checks to complete');

      - name: Enable auto-merge
        if: fromJSON(steps.check-pr.outputs.result).shouldAutoMerge
        uses: actions/github-script@v7
        with:
          script: |
            const { shouldAutoMerge, prNumber, prTitle } = ${{ steps.check-pr.outputs.result }};

            if (!shouldAutoMerge) {
              console.log('Skipping auto-merge - conditions not met');
              return;
            }

            try {
              // Enable auto-merge with squash merge
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE',
                body: 'ü§ñ Auto-approving Dependabot GitHub Actions update'
              });

              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',
                commit_title: `${prTitle}`,
                commit_message: 'Auto-merged by Dependabot workflow'
              });

              console.log(`‚úÖ Successfully auto-merged PR #${prNumber}`);

            } catch (error) {
              console.error(`‚ùå Failed to auto-merge PR #${prNumber}:`, error);
              throw error;
            }
