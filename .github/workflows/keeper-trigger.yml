---
# GitHub Repository Automations - Keeper: trigger
# MIT License - Copyright (c) 2025 Luiz Felipe F M Costa
# Source: https://github.com/thenets/repo-automations
#
# This workflow collects PR metadata from any repository (including forks)
# and stores it as an artifact for other workflows to consume.
# This enables fork compatibility while maintaining security.
#
# DESIGN PRINCIPLE:
# - Collect ALL PR metadata as-is without processing
# - No secrets required (read-only permissions)
# - Runs on any repository including forks
# - Single source of truth for PR data

name: "Keeper: trigger"

on:
  issues:
    types: [labeled, unlabeled]
  pull_request:
    types: [opened, synchronize, edited, ready_for_review, labeled, unlabeled]

permissions:
  contents: read
  pull-requests: read
  issues: read

jobs:
  collect-pr-metadata:
    runs-on: ubuntu-latest

    # CHANGE THIS: set your repo name here
    # this is used to prevent the workflow from running on other repos/forks
    # Also skip execution for draft PRs (let them be processed when marked ready for review)
    if: github.repository == 'dednets/repo-automation-test' && (github.event_name != 'pull_request' || !github.event.pull_request.draft)

    env:
      # Define accepted release and backport values
      ACCEPTED_RELEASES: '["1.0", "1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "2.0", "2.1", "2.2", "devel"]'
      ACCEPTED_BACKPORTS: '["1.0", "1.1", "1.2", "1.3", "1.4", "1.5", "1.6", "2.0", "2.1", "2.2"]'

    steps:
      - name: Collect event metadata
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`ðŸ”„ Collecting event metadata for #${context.issue.number} (${context.eventName})`);

            // Collect ALL event data as-is, no processing or validation
            let eventData = {
              event_type: context.eventName,
              issue_number: context.issue.number,
              repository: `${context.repo.owner}/${context.repo.repo}`,
              action: context.payload.action,
              workflow_run_id: context.runId,
              collected_at: new Date().toISOString()
            };

            // Add PR-specific data if this is a pull request event
            if (context.eventName === 'pull_request' && context.payload.pull_request) {
              eventData = {
                ...eventData,
                pr_number: context.issue.number,
                head_sha: context.payload.pull_request.head.sha,
                body: context.payload.pull_request.body || '',
                title: context.payload.pull_request.title,
                draft: context.payload.pull_request.draft,
                head_repo: context.payload.pull_request.head.repo.full_name,
                base_repo: context.payload.pull_request.base.repo.full_name,
                user: context.payload.pull_request.user.login,
                created_at: context.payload.pull_request.created_at,
                updated_at: context.payload.pull_request.updated_at,
                mergeable: context.payload.pull_request.mergeable,
                state: context.payload.pull_request.state
              };
            }

            // Add issue-specific data if this is an issue event
            if (context.eventName === 'issues' && context.payload.issue) {
              eventData = {
                ...eventData,
                issue_number: context.issue.number,
                body: context.payload.issue.body || '',
                title: context.payload.issue.title,
                user: context.payload.issue.user.login,
                created_at: context.payload.issue.created_at,
                updated_at: context.payload.issue.updated_at,
                state: context.payload.issue.state
              };
            }

            // Add label data for labeled/unlabeled events
            if (context.payload.label) {
              eventData.label = {
                name: context.payload.label.name,
                color: context.payload.label.color,
                description: context.payload.label.description
              };
            }

            console.log(`ðŸ“Š Event Data Summary:`);
            console.log(`  - Event Type: ${eventData.event_type}`);
            console.log(`  - Issue/PR #${eventData.issue_number}`);
            console.log(`  - Repository: ${eventData.repository}`);
            console.log(`  - Action: ${eventData.action}`);
            if (eventData.event_type === 'pull_request') {
              console.log(`  - PR Title: ${eventData.title}`);
              console.log(`  - Head Repo: ${eventData.head_repo}`);
              console.log(`  - Base Repo: ${eventData.base_repo}`);
              console.log(`  - Draft: ${eventData.draft}`);
              console.log(`  - User: ${eventData.user}`);
            }
            if (eventData.event_type === 'issues') {
              console.log(`  - Issue Title: ${eventData.title}`);
              console.log(`  - User: ${eventData.user}`);
            }
            if (eventData.label) {
              console.log(`  - Label: ${eventData.label.name}`);
            }

            // Store as artifact for other workflows to consume
            const fs = require('fs');
            fs.writeFileSync('event-metadata.json', JSON.stringify(eventData, null, 2));

            console.log(`âœ… Event metadata collected and stored for downstream workflows`);

            // Also store configuration for downstream workflows
            const config = {
              accepted_releases: JSON.parse(process.env.ACCEPTED_RELEASES || '[]'),
              accepted_backports: JSON.parse(process.env.ACCEPTED_BACKPORTS || '[]')
            };
            fs.writeFileSync('workflow-config.json', JSON.stringify(config, null, 2));
            console.log(`ðŸ“‹ Configuration stored: ${config.accepted_releases.length} releases, ${config.accepted_backports.length} backports`);

      - name: Upload event metadata artifact
        uses: actions/upload-artifact@v4
        with:
          name: event-metadata
          path: |
            event-metadata.json
            workflow-config.json
          retention-days: 7

      - name: Summary
        env:
          PR_NUMBER: ${{ github.event.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          REPOSITORY: ${{ github.repository }}
          HEAD_REPO: ${{ github.event.pull_request.head.repo.full_name }}
          ACTION: ${{ github.event.action }}
        run: |
          {
            echo "ðŸŽ¯ Trigger Workflow Complete"
            echo "- **PR**: #${PR_NUMBER} - ${PR_TITLE}"
            echo "- **Repository**: ${REPOSITORY}"
            echo "- **Head Repo**: ${HEAD_REPO}"
            echo "- **Action**: ${ACTION}"
            echo "- **Artifact**: pr-metadata.json uploaded âœ…"
            echo ""
            echo "This metadata will be consumed by action workflows on the target repository."
          } >> "$GITHUB_STEP_SUMMARY"
