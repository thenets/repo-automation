---
name: "Keeper: auto-label release and backport from PR description"

'on':
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write

jobs:
  auto-label-release-backport:
    runs-on: ubuntu-latest

    # CHANGE THIS: set your repo name here
    # this is used to prevent the workflow from running on other repos/forks
    if: github.repository == 'thenets/repo-automations'

    steps:
      - name: Parse YAML from PR description and add labels
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`Processing PR #${context.issue.number}`);

            // Get PR description
            const prBody = context.payload.pull_request.body || '';
            console.log(`PR description:\n${prBody}`);

            let yamlFound = false;
            let releaseLabel = null;
            let backportLabel = null;

            // Look for YAML code blocks in the PR description
            const yamlBlockRegex = /```yaml\s*\n([\s\S]*?)\n\s*```/g;
            let match;

            while ((match = yamlBlockRegex.exec(prBody)) !== null) {
              const yamlContent = match[1];
              console.log(`Found YAML block:\n${yamlContent}`);

              // Parse release and backport values
              const releaseMatch = yamlContent.match(/^release:\s*(.+)$/m);
              const backportMatch = yamlContent.match(/^backport:\s*(.+)$/m);

              if (releaseMatch) {
                const releaseValue = releaseMatch[1].trim().replace(/#.*$/, '').trim();
                releaseLabel = `release ${releaseValue}`;
                console.log(`Found release: ${releaseValue}`);
                yamlFound = true;
              }

              if (backportMatch) {
                const backportValue = backportMatch[1].trim().replace(/#.*$/, '').trim();
                backportLabel = `backport ${backportValue}`;
                console.log(`Found backport: ${backportValue}`);
                yamlFound = true;
              }

              // Stop after finding the first YAML block with valid content
              if (yamlFound) break;
            }

            if (!yamlFound) {
              console.log('No YAML code blocks found in PR description');
              return;
            }

            // Add labels to the PR
            const labelsToAdd = [];
            if (releaseLabel) labelsToAdd.push(releaseLabel);
            if (backportLabel) labelsToAdd.push(backportLabel);

            if (labelsToAdd.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: labelsToAdd
                });
                console.log(`Successfully added labels: ${labelsToAdd.join(', ')}`);
              } catch (error) {
                if (error.status === 422) {
                  console.log('Some labels may already exist on the PR');
                } else {
                  console.error('Error adding labels:', error);
                }
              }
            }