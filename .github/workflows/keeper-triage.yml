---
# GitHub Repository Automations - Keeper: triage
# MIT License - Copyright (c) 2025 Luiz Felipe F M Costa
# Source: https://github.com/thenets/repo-automations
#
# This workflow merges the functionality of:
# - keeper-auto-add-triage-label.yml
# - keeper-ready-for-review-labeling.yml
# - keeper-triage-label-protection.yml
#
# PERMISSIONS REQUIRED FOR FINE-GRAINED PERSONAL ACCESS TOKEN:
# When using a custom token (CUSTOM_GITHUB_TOKEN secret), the token must have:
# - Repository access: This repository (or "All repositories" for organization-wide use)
# - Repository permissions:
#   - Issues: Write (to add labels to issues)
#   - Pull requests: Write (to add labels to pull requests)
#   - Metadata: Read (to access repository information)
#
# SETUP INSTRUCTIONS:
# 1. Create a fine-grained personal access token at: https://github.com/settings/tokens?type=beta
# 2. Grant the permissions listed above
# 3. Add the token as a repository secret named 'CUSTOM_GITHUB_TOKEN'
# 4. This enables the workflow to run successfully for external contributors
#
# NOTE: Without a custom token, the workflow may fail for external contributors
# due to GitHub's default token permission restrictions.

name: "Keeper: triage"

'on':
  issues:
    types: [opened]
  workflow_run:
    workflows: ["Keeper: trigger"]
    types: [completed]

permissions:
  issues: write
  pull-requests: write

jobs:
  triage-labeling:
    runs-on: ubuntu-latest
    if: github.repository == 'dednets/repo-automation-test'

    steps:
      - name: Add triage label to new issues
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN || github.token }}
          script: |
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['triage']
              });
              console.log('✅ Successfully added triage label to issue #' + context.issue.number);
            } catch (error) {
              if (error.status === 403) {
                const errorMsg = `❌ Permission denied: Unable to add 'triage' label to issue #${context.issue.number}. Repository administrators should add a CUSTOM_GITHUB_TOKEN secret with 'Issues: Write' permission.`;
                console.error(errorMsg);
                throw new Error(errorMsg);
              } else if (error.status === 422) {
                try {
                  const { data: existingLabels } = await github.rest.issues.listLabelsOnIssue({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number
                  });
                  const hasTriageLabel = existingLabels.some(label => label.name === 'triage');
                  if (hasTriageLabel) {
                    console.log('ℹ️ Triage label already exists on issue #' + context.issue.number);
                  } else {
                    const errorMsg = `❌ Failed to add 'triage' label to issue #${context.issue.number}: Label 'triage' does not exist in the repository.`;
                    console.error(errorMsg);
                    throw new Error(errorMsg);
                  }
                } catch (listError) {
                  const errorMsg = `❌ Error checking existing labels on issue #${context.issue.number}: ${listError.message}`;
                  console.error(errorMsg);
                  throw new Error(errorMsg);
                }
              } else {
                const errorMsg = `❌ Unexpected error adding triage label to issue #${context.issue.number}: ${error.message}`;
                console.error(errorMsg);
                throw new Error(errorMsg);
              }
            }

      - name: Download event metadata (workflow_run)
        if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
        uses: actions/download-artifact@v5
        with:
          name: event-metadata
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Process pull request events
        if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN || github.token }}
          script: |
            // Load event metadata from artifact
            const fs = require('fs');
            const eventData = JSON.parse(fs.readFileSync('event-metadata.json', 'utf8'));
            console.log(`Processing ${eventData.event_type} #${eventData.issue_number} from workflow_run trigger`);

            // Handle different event types
            if (eventData.event_type === 'pull_request') {
              await handlePullRequestEvent(eventData);
            } else if (eventData.event_type === 'issues' && eventData.action === 'unlabeled' && eventData.label?.name === 'triage') {
              await handleTriageProtectionForIssue(eventData);
            } else {
              console.log(`Event type ${eventData.event_type} with action ${eventData.action} not handled by this workflow`);
            }

            // Function to handle pull request events
            async function handlePullRequestEvent(eventData) {
              // Skip draft PRs
              if (eventData.draft) {
                console.log(`PR #${eventData.issue_number} is draft, skipping labeling`);
                return;
              }

              // Handle triage protection for PRs (unlabeled events)
              if (eventData.action === 'unlabeled' && eventData.label?.name === 'triage') {
                await handleTriageProtectionForPR(eventData);
                return;
              }

              // Sleep for 10 seconds as requested
              console.log('⏳ Sleeping for 10 seconds...');
              await new Promise(resolve => setTimeout(resolve, 10000));

              try {
                // Get current labels on the PR
                const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: eventData.issue_number
                });

                const labelNames = labels.map(label => label.name);
                console.log(`Current labels on PR #${eventData.issue_number}: ${labelNames.join(', ')}`);

                // Check conditions
                const hasReleaseLabel = labels.some(label => label.name.startsWith('release '));
                const hasBackportLabel = labels.some(label => label.name.startsWith('backport '));
                const hasTriageLabel = labels.some(label => label.name === 'triage');
                const hasReadyForReviewLabel = labels.some(label => label.name === 'ready for review');

                console.log(`Has release label: ${hasReleaseLabel}`);
                console.log(`Has backport label: ${hasBackportLabel}`);
                console.log(`Has triage label: ${hasTriageLabel}`);
                console.log(`Has ready for review label: ${hasReadyForReviewLabel}`);
                console.log(`Is draft: ${eventData.draft}`);

                // Main logic: If PR has release label and not draft, add ready for review; otherwise add triage
                // Note: PRs with backport labels should also not get triage labels (they should be left as-is)
                if (hasReleaseLabel && !eventData.draft) {
                  // Add ready for review label if not already present
                  if (!hasReadyForReviewLabel) {
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: eventData.issue_number,
                      labels: ['ready for review']
                    });
                    console.log(`✅ Successfully added "ready for review" label to PR #${eventData.issue_number} (has release label, not draft)`);
                  } else {
                    console.log(`ℹ️ PR #${eventData.issue_number} already has "ready for review" label`);
                  }
                } else if (!hasBackportLabel) {
                  // Add triage label if not already present and no backport label exists
                  if (!hasTriageLabel) {
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: eventData.issue_number,
                      labels: ['triage']
                    });
                    if (!hasReleaseLabel) {
                      console.log(`✅ Successfully added triage label to PR #${eventData.issue_number} (no release/backport label)`);
                    } else {
                      console.log(`✅ Successfully added triage label to PR #${eventData.issue_number} (is draft)`);
                    }
                  } else {
                    console.log(`ℹ️ PR #${eventData.issue_number} already has triage label`);
                  }
                } else {
                  // PR has backport label - don't add any labels
                  console.log(`ℹ️ PR #${eventData.issue_number} has backport label, skipping automatic labeling`);
                }

              } catch (error) {
                await handleLabelingError(error, eventData.issue_number, 'PR');
              }
            }

            // Function to handle triage protection for issues
            async function handleTriageProtectionForIssue(eventData) {
              console.log(`Triage label removed from issue #${eventData.issue_number}, checking for protection conditions`);

              try {
                const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: eventData.issue_number
                });

                const hasReleaseLabel = labels.some(label => label.name.startsWith('release '));
                const hasBackportLabel = labels.some(label => label.name.startsWith('backport '));

                // If no release or backport labels, re-add triage label
                if (!hasReleaseLabel && !hasBackportLabel) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: eventData.issue_number,
                    labels: ['triage']
                  });
                  console.log('✅ Re-added triage label to issue #' + eventData.issue_number + ' (no release/backport labels found)');
                } else {
                  console.log('ℹ️ Triage label removal allowed for issue #' + eventData.issue_number + ' (release/backport labels present)');
                }
              } catch (error) {
                await handleLabelingError(error, eventData.issue_number, 'issue');
              }
            }

            // Function to handle triage protection for PRs
            async function handleTriageProtectionForPR(eventData) {
              console.log(`Triage label removed from PR #${eventData.issue_number}, checking for protection conditions`);

              try {
                const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: eventData.issue_number
                });

                const hasReleaseLabel = labels.some(label => label.name.startsWith('release '));
                const hasBackportLabel = labels.some(label => label.name.startsWith('backport '));

                // If no release or backport labels, re-add triage label
                if (!hasReleaseLabel && !hasBackportLabel) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: eventData.issue_number,
                    labels: ['triage']
                  });
                  console.log('✅ Re-added triage label to PR #' + eventData.issue_number + ' (no release/backport labels found)');
                } else {
                  console.log('ℹ️ Triage label removal allowed for PR #' + eventData.issue_number + ' (release/backport labels present)');
                }
              } catch (error) {
                await handleLabelingError(error, eventData.issue_number, 'PR');
              }
            }

            // Function to handle labeling errors
            async function handleLabelingError(error, issueNumber, type) {
              if (error.status === 403) {
                const errorMsg = `❌ Permission denied: Unable to add label to ${type} #${issueNumber}. Repository administrators should add a CUSTOM_GITHUB_TOKEN secret with appropriate permissions.`;
                console.error(errorMsg);
                throw new Error(errorMsg);
              } else if (error.status === 422) {
                try {
                  const { data: existingLabels } = await github.rest.issues.listLabelsOnIssue({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber
                  });
                  console.log(`ℹ️ Label already exists on ${type} #${issueNumber} - this is expected behavior`);
                } catch (listError) {
                  const errorMsg = `❌ Error checking existing labels on ${type} #${issueNumber}: ${listError.message}`;
                  console.error(errorMsg);
                  throw new Error(errorMsg);
                }
              } else {
                const errorMsg = `❌ Unexpected error processing labels for ${type} #${issueNumber}: ${error.message}`;
                console.error(errorMsg);
                throw new Error(errorMsg);
              }
            }
